#!/usr/bin/env node --expose-gc 

// Prefer a local package installation based on the CWD
var requireCwd = require('require-like')(process.cwd() + '/.');


function subcommand(command, argv, done) {
  var pkg = 'mjs-' + command;
  var command;
  try {
    command = requireCwd(pkg + '/mjs');
  } catch (e) {
    console.error('Package "' + pkg + '" not found or is not a subcommand');
    done(1);
    return;
  }
  if (typeof command !== 'function') {
    console.error('Module "' + pkg + '/mjs" must export a function');
    done(1);
    return;
  }

  try {
    command(argv, done);
  } catch (e) {
    console.error('Command "' + pkg + '" failed: ' + e);
    done(1);
  }
}


function mjs(argv, done) {
  var mjs;
  try {
    mjs = requireCwd('meta-script/lib/mjs');

    // Ignore local installation if we are working on a compiler checkout
    var rootDir = require('parentpath').sync('package.json');
    if (rootDir && requireCwd(rootDir + '/package.json').name === 'meta-script') {
      throw new Error('Working on the compiler, using the checkout version');
    }

    // Backwards compatibility
    var pkg = requireCwd('meta-script/package.json');
    if (pkg.version < '0.0.39') {
      argv = process.argv;
    }
  } catch (e) {
    mjs = require('../lib/mjs');
  }

  return mjs(argv, done)
}

function done(exitcode) {
  process.exit(exitcode);
}

var exitcode;
var argv = process.argv.slice(2);

// Detect sub commands
if (argv.length >= 1 && /^\w[\w\d-]*$/.test(argv[0])) {
  subcommand(argv[0], argv.slice(1), done);
} else {
  mjs(argv, done);
}
